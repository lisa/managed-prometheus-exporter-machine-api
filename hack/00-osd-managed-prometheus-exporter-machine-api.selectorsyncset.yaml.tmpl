apiVersion: v1
kind: Template
metadata:
  name: selectorsyncset-template
objects:
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-prometheus-exporter-machine-api
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
    - apiVersion: apps.openshift.io/v1
      kind: DeploymentConfig
      metadata:
        labels:
          name: sre-machine-api-status-exporter
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
      spec:
        paused: false
        replicas: 1
        selector:
          name: sre-machine-api-status-exporter
        strategy:
          type: Recreate
        template:
          metadata:
            annotations:
              managed.openshift.io/exporter_source_code_hash: 51640575f32c3efd32c857d2eaa9f445ba3e97035a140ad2fb306fcf1ee6a4da
            labels:
              name: sre-machine-api-status-exporter
            name: sre-machine-api-status-exporter
          spec:
            affinity:
              nodeAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                    - key: node-role.kubernetes.io/infra
                      operator: Exists
                  weight: 1
            containers:
            - command:
              - /bin/sh
              - /monitor/start.sh
              env:
              - name: MACHINE_NAMESPACE
                value: openshift-machine-api
              image: quay.io/openshift-sre/managed-prometheus-exporter-base:latest
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 2
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 420
                periodSeconds: 360
                timeoutSeconds: 240
              name: main
              ports:
              - containerPort: 8080
                protocol: TCP
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 3
                timeoutSeconds: 240
              volumeMounts:
              - mountPath: /monitor
                name: monitor-volume
                readOnly: true
              workingDir: /monitor
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            serviceAccountName: sre-machine-api-status-exporter
            tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/infra
              operator: Exists
            volumes:
            - configMap:
                name: sre-machine-api-status-exporter-code
              name: monitor-volume
        triggers:
        - type: ConfigChange
    - apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        labels:
          k8s-app: sre-machine-api-status-exporter
          name: sre-machine-api-status-exporter
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
      spec:
        endpoints:
        - honorLabels: true
          interval: 2m
          port: http-main
          scheme: http
          scrapeTimeout: 2m
          targetPort: 0
        jobLabel: sre-machine-api-status-exporter
        namespaceSelector: {}
        selector:
          matchLabels:
            name: sre-machine-api-status-exporter
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: sre-allow-read-machine-info
      rules:
      - apiGroups:
        - machine.openshift.io
        resources:
        - machines
        verbs:
        - get
        - list
    - apiVersion: v1
      data:
        main.py: "#!/usr/bin/env python\n\nfrom sets import Set\n\nimport logging\nimport
          os\nimport time\n\nfrom prometheus_client import start_http_server, Gauge\nfrom
          kubernetes import client, config\nfrom kubernetes.client import ApiClient,
          Configuration\nfrom openshift.dynamic import DynamicClient\n\nMACHINE_STATUS
          = Gauge('machine_api_status',\"1 if machine has an associated node\", labelnames=['machine_name','namespace'])\n\n#
          A list (implemented as a Set) of all active Machines\nACTIVE_MACHINES =
          Set([])\n\ndef get_machines(dynamic_client,namespace):\n    \"\"\"Gets all
          of the Machine objects from the cluster from the specified namespace.\n
          \   \"\"\"\n    machines = dynamic_client.resources.get(kind='Machine')\n
          \   return machines.get(namespace=namespace).items\n\ndef collect(dynamic_client,
          namespace):\n    \"\"\"\n    Collect the current data from the AWS API.\n
          \   \"\"\"\n\n    # List of volumes that we've actually had data back for
          the API\n    seen_machines = Set([])\n    machines = get_machines(dynamic_client,
          namespace)\n    for machine in machines:\n        seen_machines.add(machine['metadata']['name'])\n
          \       ACTIVE_MACHINES.add(machine['metadata']['name'])\n\n        value
          = 1\n        if not 'status' in list(machine.keys()) or not 'nodeRef' in
          list(machine['status'].keys()):\n            value = 0\n\n        MACHINE_STATUS.labels(\n
          \           machine_name = machine['metadata']['name'],\n            namespace
          = namespace\n        ).set(value)\n\n    logging.debug(\"Have %d ACTIVE_MACHINES,
          seen %d machines, total machines from list_metrics %d\",len(ACTIVE_MACHINES),len(seen_machines),len(machines))\n
          \   for inactive_machine in ACTIVE_MACHINES - seen_machines:\n        logging.info(\"Removing
          machine_api_status{machine_name='%s'} from Prometheus \",inactive_machine)\n\n
          \       MACHINE_STATUS.remove(\n            machine_name = inactive_machine,\n
          \           namespace = namespace\n        )\n\n        ACTIVE_MACHINES.remove(inactive_machine)\n\nif
          __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s
          %(levelname)s:%(name)s:%(message)s')\n\n    namespace = \"openshift-machine-api\"\n
          \   if \"MACHINE_NAMESPACE\" in os.environ:\n        namespace = os.getenv(\"MACHINE_NAMESPACE\")\n\n
          \   logging.info(\"Starting machinewatcher\")\n    incluster = config.load_incluster_config()\n
          \   k8s_cluster = client.api_client.ApiClient(incluster)\n    dynclient
          = DynamicClient(k8s_cluster)\n\n    start_http_server(8080)\n    while True:\n
          \       collect(dynclient, namespace)\n        time.sleep(30)\n"
        start.sh: "#!/bin/sh\n\nset -o allexport\n\nif [[ -d /config && -d /config/env
          ]]; then\n  source /config/env/*\nfi\n\nexec /usr/bin/python /monitor/main.py
          \"$@\""
      kind: ConfigMap
      metadata:
        creationTimestamp: null
        name: sre-machine-api-status-exporter-code
        namespace: openshift-monitoring
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          name: sre-machine-api-status-exporter
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
      spec:
        ports:
        - name: http-main
          port: 80
          protocol: TCP
          targetPort: 8080
        selector:
          name: sre-machine-api-status-exporter
        sessionAffinity: None
        type: ClusterIP
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: edit
      subjects:
      - kind: ServiceAccount
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: sre-machine-api-status-exporter-read-machine-info
        namespace: openshift-machine-api
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: sre-allow-read-machine-info
      subjects:
      - kind: ServiceAccount
        name: sre-machine-api-status-exporter
        namespace: openshift-monitoring
parameters:
- name: IMAGE_TAG
  required: true
- name: REPO_NAME
  required: true
  value: managed-prometheus-exporter-machine-api
